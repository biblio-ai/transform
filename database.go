package main

func createBiblioDB(env *Env) {
  statement, err := env.db.Prepare("CREATE TABLE IF NOT EXISTS item (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, url TEXT, file_identifier TEXT, oai_identifier TEXT, handle TEXT, issued DATE NOT NULL DEFAULT CURRENT_DATE, type TEXT)")
  if err != nil {
    panic(err)
  }
  statement.Exec()
  statement_entity, _ := env.db.Prepare("CREATE TABLE IF NOT EXISTS item_text (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER, line INTEGER,value TEXT,box TEXT, CONSTRAINT fk_item_text FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_description (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT,score TEXT, CONSTRAINT fk_item_description FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_category (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT,score TEXT, CONSTRAINT fk_item_category FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_tag (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT,score TEXT, CONSTRAINT fk_item_tag FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_object (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT, x TEXT, y TEXT, width TEXT, height TEXT, score TEXT, CONSTRAINT fk_item_object FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_brand (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT, x TEXT, y TEXT, width TEXT, height TEXT, score TEXT, CONSTRAINT fk_item_brand FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_face (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER, gender TEXT, age TEXT, position_left TEXT, position_top TEXT, position_width TEXT, position_height TEXT, CONSTRAINT fk_item_face FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_color (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  black_and_white TEXT, accent_color TEXT, dominant_color_background TEXT, dominant_color_foreground TEXT, dominant_colors TEXT, CONSTRAINT fk_item_color FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_adult (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT,score TEXT, CONSTRAINT fk_item_adult FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_racy (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT,score TEXT, CONSTRAINT fk_item_racy FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_celebrity (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid,  timestamp INTEGER, value TEXT,score TEXT, position_height TEXT, position_left TEXT, position_top TEXT, position_width TEXT, CONSTRAINT fk_item_celebrity FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_landmark (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT,score TEXT, CONSTRAINT fk_item_landmark FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_text_entity (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT, text_length INTEGER, text_offset INTEGER, text_type TEXT, text_sub_type TEXT, match_text TEXT, match_wikipedia_scrore TEXT, text_score TEXT, CONSTRAINT fk_item_text_entity FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_text_language (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT, code TEXT, score TEXT, CONSTRAINT fk_item_text_language FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_text_sentiment (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  score TEXT, CONSTRAINT fk_item_text_sentiment FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
  statement_entity, _ = env.db.Prepare("CREATE TABLE IF NOT EXISTS item_text_key_phrase (id uuid DEFAULT uuid_generate_v4() PRIMARY KEY, item_id uuid, timestamp INTEGER,  value TEXT, CONSTRAINT fk_item_text_key_phrase FOREIGN KEY(item_id) REFERENCES item(id) ON DELETE SET NULL)")
  statement_entity.Exec()
}
